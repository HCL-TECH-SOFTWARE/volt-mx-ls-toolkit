<?xml version='1.0' encoding='utf-8'?>
<agent name='(RunAgentAsync)' xmlns='http://www.lotus.com/dxl' version='11.0'
 maintenanceversion='1.0' replicaid='8025872B003E39F1' hide='v3' publicaccess='false'
 designerversion='8.5.3'>
<noteinfo noteid='1ca' unid='97F3ACB8F4ED27EC8025872B0040EBF3' sequence='23'>
<created><datetime dst='true'>20210808T124907,07+01</datetime></created>
<modified><datetime dst='true'>20210808T163500,85+01</datetime></modified>
<revised><datetime dst='true'>20210808T162608,73+01</datetime></revised>
<lastaccessed><datetime dst='true'>20210808T163500,84+01</datetime></lastaccessed>
<addedtofile><datetime dst='true'>20210808T124907,43+01</datetime></addedtofile></noteinfo>
<updatedby><name>CN=Paul Withers/OU=UK/O=PNPHCL</name></updatedby>
<wassignedby><name>CN=Paul Withers/OU=UK/O=PNPHCL</name></wassignedby>
<designchange><datetime dst='true'>20210808T162608,68+01</datetime></designchange>
<trigger type='agentlist'/>
<documentset type='runonce'/><code event='options'><lotusscript>%REM
	Copyright 2020 Paul Withers, HCL
	Licensed under the Apache License, Version 2.0 (the "License"); 
	you may not use this file except in compliance with the License. 
	You may obtain a copy of the License at

	http://www.apache.org/licenses/LICENSE-2.0

	Unless required by applicable law or agreed to in writing, 
	software distributed under the License is distributed on an "AS IS" BASIS, 
	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. 
	See the License for the specific language governing permissions and limitations under the License
	
	Endpoint for triggering an agent async:
	- Creates a document to be picked up by scheduled agent
	- Seeds it with key information from the request
%END REM
Option Public
Option Declare
Use "NotesHttpJsonRequestHelper"

</lotusscript></code><code event='initialize'><lotusscript>Sub Initialize
	Dim s As New NotesSession
	Dim doc As NotesDocument, schedDoc As NotesDocument, actionDoc As NotesDocument
	Dim httpRequest As NotesAgent_JsonHTTPHelper
	Dim agentName As String, callbackUrl As String, method As String
	Dim dbPath As String, payloadAsString As String, unid As String
	Dim payload As NotesJSONObject
	Dim elem As NotesJSONElement
	Dim returnFields As NotesJSONArray
	Dim isNotFirstElem As Boolean
	Dim counter As Integer
	
	On Error Goto logErr
	
	Set doc = s.Documentcontext
	Set httpRequest = New NotesAgent_JsonHTTPHelper(doc)
	If (httpRequest.IsValid()) Then
		If (httpRequest.findStringByPointer("/dbPath", dbPath)) Then
			If (httpRequest.findStringByPointer("/agentName", agentName)) Then
				Call httpRequest.findStringByPointer("/callbackUrl", callbackUrl)
				Call httpRequest.findStringByPointer("/method", method)
				
				If (httpRequest.findJsonObjectByPointer("/payload", payload)) Then
					payloadAsString = |{|
					Set elem = payload.Getfirstelement()
					While Not (elem Is Nothing)
						If (isNotFirstElem) Then
							payloadAsString = payloadAsString &amp; |,|
						Else
							isNotFirstElem = False
						End If
						Select Case elem.Type
						Case Type_JsonNumber:
						Case Type_JsonBoolean:
						Case Type_JsonString:
							' We need to handle date/date-time/time strings!
							payloadAsString = payloadAsString &amp; |"| &amp; elem.Name &amp; |":"| &amp; Cstr(elem.Value) &amp; |"|
						Case Else
							enhLogException ||, |Unexpected value found for /payload/| &amp; elem.Name
					End Select
						Set elem = payload.Getnextelement()
					Wend
					payloadAsString = payloadAsString &amp; |}|
				End If
				
				If (httpRequest.findStringByPointer("/unid", unid)) Then
					If (dbPath = "") Then
						Set actionDoc = s.Currentdatabase.Getdocumentbyunid(unid)
					Else
						Dim db As NotesDatabase
						Set db = s.Getdatabase("", dbPath, False)
						If (Not db Is Nothing) Then
							Set actionDoc = db.Getdocumentbyunid(unid)
						End If
					End If
				End If
				
				Redim m_returnFields(0)
				If (httpRequest.findJsonArrayByPointer("/returnFields", returnFields)) Then
					Redim m_returnFields(returnFields.size - 1)
					Set elem = returnFields.Getfirstelement()
					counter = 0
					While Not elem Is Nothing
						m_returnFields(counter) = elem.value
						Set elem = returnFields.Getnextelement()
						counter = counter + 1
					Wend
				End If
				
				Set schedDoc = s.Currentdatabase.Createdocument()
				With schedDoc
					.Form = "AsyncHttpRequest"
					.agentName = agentName
					.dbPath = dbPath
					.method = Ucase(method)
					.callbackUrl = callbackUrl
					.payload = payloadAsString
					If (actionDoc Is Nothing) Then
						.actionDocUnid = ""						
					Else
						.actionDocUnId = actionDoc.universalID
					End If
					.requestID = Evaluate(|@Unique|)
					.status = "Pending"
					.save True, False
				End With
				Call httpRequest.setResponseStatus(201)
				Call httpRequest.getJSONResponseBody()_
				.appendElementFluent("Processing", "status")_
				.appendElementFluent(schedDoc.requestID(0), "requestID")
				Exit Sub
			End If
		End If
		Call httpRequest.closeRequestWithError("agentName, callbackUrl and payload elements are expected in body", HTTP_STATUS_BAD_REQUEST)
	End If
	
	Exit Sub
	
logErr:
	Select Case Err
		Case 4091:
			enhLogException ||, |Invalid document UNID passed to NotesAgent_FoundryHTTPHelper: | &amp; unid
			Call httpRequest.closeRequestWithError("Invalid document UNID passed", HTTP_STATUS_BAD_REQUEST)
		Case Else:
			enhLogAction ||, || 
			Call httpRequest.closeRequestWithError(|{"error":"Unexpected error in processing"}|, HTTP_STATUS_CODE_ERROR)
	End Select
	Exit Sub
End Sub</lotusscript></code>
<rundata processeddocs='0' exitcode='0' agentdata='059AB3544CB9BCC78025872B00555A46'>
<agentmodified><datetime dst='true'>20210808T162608,74+01</datetime></agentmodified>
<agentrun><datetime dst='true'>20210808T163216,70+01</datetime></agentrun>
<runlog>Started running agent 'RunAgentAsync' on 08/08/2021 16:32:16
Ran LotusScript code
Done running agent 'RunAgentAsync' on 08/08/2021 16:32:16
</runlog></rundata></agent>

